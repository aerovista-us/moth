function generateStreamlinedHeader() {return ` <header class="streamlined-header"> <div class="header-container"> <!-- Brand Section --> <div class="brand-section"> <div class="brand-title">🦋 Moth Emporium Presents</div> <div class="brand-subtitle">Nailed IT Business Planning Suite</div> </div> <!-- Navigation Dropdown --> <nav class="site-map-nav"> <button class="nav-toggle" id="navToggle" aria-label="Toggle site map"> <span class="nav-toggle-icon">☰</span> <span class="nav-toggle-text">Site Map</span> </button> <div class="nav-dropdown" id="navDropdown"> <div class="nav-grid"> <!-- Core Business Tools --> <div class="nav-section"> <h3 class="nav-section-title">Core Business Tools</h3> <ul class="nav-links"> <li><a href="index.html" class="nav-link">🏠 Home</a></li> <li><a href="overview.html" class="nav-link">🎨 Product Overview</a></li> <li><a href="planning.html" class="nav-link">📸 Content Planning</a></li> <li><a href="tracking.html" class="nav-link">📊 Progress Tracking</a></li> </ul> </div> <!-- Operations --> <div class="nav-section"> <h3 class="nav-section-title">Operations</h3> <ul class="nav-links"> <li><a href="supply.html" class="nav-link">📦 Supply Chain</a></li> <li><a href="launch.html" class="nav-link">🚀 Launch Timeline</a></li> <li><a href="analytics.html" class="nav-link">📈 Analytics & KPIs</a></li> </ul> </div> <!-- Advanced Features --> <div class="nav-section"> <h3 class="nav-section-title">Advanced Features</h3> <ul class="nav-links"> <li><a href="advanced-analytics.html" class="nav-link">🚀 Advanced Analytics</a></li> <li><a href="ai-assistant.html" class="nav-link">🤖 AI Assistant</a></li> <li><a href="automation-tools.html" class="nav-link">⚡ Automation Tools</a></li> </ul> </div> <!-- Team & Tools --> <div class="nav-section"> <h3 class="nav-section-title">Team & Tools</h3> <ul class="nav-links"> <li><a href="collaboration.html" class="nav-link">👥 Team Collaboration</a></li> <li><a href="mobile-pwa.html" class="nav-link">📱 Mobile PWA</a></li> <li><a href="content-calendar.html" class="nav-link">📅 Content Calendar</a></li> </ul> </div> <!-- Business Tools --> <div class="nav-section"> <h3 class="nav-section-title">Business Tools</h3> <ul class="nav-links"> <li><a href="pricing-calculator.html" class="nav-link">💰 Pricing Calculator</a></li> <li><a href="supplier-vetting.html" class="nav-link">🔍 Supplier Vetting</a></li> </ul> </div> <!-- Documentation --> <div class="nav-section"> <h3 class="nav-section-title">Documentation</h3> <ul class="nav-links"> <li><a href="README.html" class="nav-link">📚 Interactive Guide</a></li> <li><a href="FUTURE_ROADMAP.md" class="nav-link">🗺️ Development Roadmap</a></li> </ul> </div> </div> </div> </nav> </div> </header> `} function generateStreamlinedStyles() {return ` <style> .streamlined-header {background: linear-gradient(135deg, #1a1a1a 0%, #2d1b69 25%, #6b46c1 50%, #2d1b69 75%, #1a1a1a 100%);color: #f3e8ff;padding: 1.5rem 0;position: relative;z-index: 1000;box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);border-bottom: 3px solid #6b46c1} .header-container {max-width: 1400px;margin: 0 auto;padding: 0 2rem;display: flex;justify-content: space-between;align-items: center} .brand-section {flex: 1} .brand-title {font-size: 1.2rem;font-weight: 600;color: #d4a5a5;margin-bottom: 0.5rem;letter-spacing: 1px;text-transform: uppercase;text-shadow: 0 0 10px rgba(212, 165, 165, 0.3)} .brand-subtitle {font-size: 1.8rem;font-weight: 700;color: #f3e8ff;text-shadow: 0 0 15px rgba(107, 70, 193, 0.4);line-height: 1.2} .nav-toggle {background: linear-gradient(135deg, rgba(107, 70, 193, 0.2), rgba(139, 92, 246, 0.2));border: 2px solid #6b46c1;color: #f3e8ff;padding: 1rem 2rem;border-radius: 12px;cursor: pointer;display: flex;align-items: center;gap: 0.75rem;font-weight: 600;transition: all 0.3s ease;font-size: 1rem;position: relative;overflow: hidden} .nav-toggle::before {content: '';position: absolute;top: 0;left: -100%;width: 100%;height: 100%;background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);transition: left 0.5s ease} .nav-toggle:hover::before {left: 100%} .nav-toggle:hover {background: linear-gradient(135deg, #6b46c1, #8b5cf6);transform: translateY(-3px);box-shadow: 0 8px 25px rgba(107, 70, 193, 0.4);border-color: #8b5cf6} .nav-toggle-icon {font-size: 1.4rem;transition: transform 0.3s ease} .nav-toggle:hover .nav-toggle-icon {transform: rotate(90deg)} .nav-dropdown {position: absolute;top: 100%;right: 2rem;background: #ffffff;border: 1px solid #e5e7eb;border-radius: 16px;box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);padding: 2rem;min-width: 900px;max-width: 1200px;opacity: 0;visibility: hidden;transform: translateY(-20px);transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);z-index: 1001;backdrop-filter: blur(10px)} .nav-dropdown.active {opacity: 1;visibility: visible;transform: translateY(0)} .nav-grid {display: grid;grid-template-columns: repeat(3, 1fr);gap: 2.5rem} .nav-section {min-width: 0} .nav-section-title {font-size: 1rem;font-weight: 700;color: #6b46c1;margin: 0 0 1.5rem 0;text-transform: uppercase;letter-spacing: 0.5px;border-bottom: 3px solid #f3e8ff;padding-bottom: 0.75rem;position: relative} .nav-section-title::after {content: '';position: absolute;bottom: -3px;left: 0;width: 30px;height: 3px;background: #6b46c1;border-radius: 2px} .nav-links {list-style: none;padding: 0;margin: 0} .nav-links li {margin-bottom: 0.75rem} .nav-link {display: block;color: #374151;text-decoration: none;padding: 0.75rem 1rem;border-radius: 8px;transition: all 0.3s ease;font-size: 0.95rem;font-weight: 500;position: relative;overflow: hidden} .nav-link::before {content: '';position: absolute;top: 0;left: -100%;width: 100%;height: 100%;background: linear-gradient(90deg, transparent, rgba(107, 70, 193, 0.1), transparent);transition: left 0.3s ease} .nav-link:hover::before {left: 100%} .nav-link:hover {background: linear-gradient(135deg, #f3e8ff, #e0e7ff);color: #6b46c1;transform: translateX(8px);box-shadow: 0 4px 12px rgba(107, 70, 193, 0.2)} @media (max-width: 1024px) {.nav-dropdown {min-width: 700px} .nav-grid {grid-template-columns: repeat(2, 1fr);gap: 2rem} } @media (max-width: 768px) {.header-container {padding: 0 1rem} .brand-subtitle {font-size: 1.4rem} .nav-dropdown {right: 1rem;left: 1rem;min-width: auto;padding: 1.5rem} .nav-grid {grid-template-columns: 1fr;gap: 1.5rem} .nav-toggle {padding: 0.8rem 1.5rem;font-size: 0.9rem} } .nav-toggle:focus, .nav-link:focus {outline: 3px solid #6b46c1;outline-offset: 2px} @keyframes fadeInDown {from {opacity: 0;transform: translateY(-20px)} to {opacity: 1;transform: translateY(0)} } .nav-dropdown.active {animation: fadeInDown 0.4s cubic-bezier(0.4, 0, 0.2, 1)} .nav-toggle.loading {opacity: 0.7;pointer-events: none} .nav-toggle.loading .nav-toggle-icon {animation: spin 1s linear infinite} @keyframes spin {from {transform: rotate(0deg)} to {transform: rotate(360deg)} } </style> `} function initStreamlinedNavigation() {const navToggle = document.getElementById('navToggle');const navDropdown = document.getElementById('navDropdown');if (!navToggle || !navDropdown) return;navToggle.addEventListener('click', function(e) {e.preventDefault();navDropdown.classList.toggle('active');const toggleText = navToggle.querySelector('.nav-toggle-text');if (navDropdown.classList.contains('active')) {toggleText.textContent = 'Close'} else {toggleText.textContent = 'Site Map'} });document.addEventListener('click', function(e) {if (!navToggle.contains(e.target) && !navDropdown.contains(e.target)) {navDropdown.classList.remove('active');const toggleText = navToggle.querySelector('.nav-toggle-text');toggleText.textContent = 'Site Map'} });document.addEventListener('keydown', function(e) {if (e.key === 'Escape') {navDropdown.classList.remove('active');const toggleText = navToggle.querySelector('.nav-toggle-text');toggleText.textContent = 'Site Map'} });const currentPage = getCurrentPage();const navLinks = document.querySelectorAll('.nav-link');navLinks.forEach(link => {const href = link.getAttribute('href');if (href && href.includes(currentPage)) {link.style.background = '#f3e8ff';link.style.color = '#6b46c1';link.style.fontWeight = '600'} })} function getCurrentPage() {const path = window.location.pathname;const filename = path.split('/').pop().replace('.html', '');if (filename === 'index' || filename === '' || filename === 'index.html') {return 'index'} return filename} document.addEventListener('DOMContentLoaded', function() {console.log('🦋 Streamlined Navigation loading...');const headerPlaceholder = document.getElementById('header-placeholder');if (headerPlaceholder) {headerPlaceholder.innerHTML = generateStreamlinedHeader();console.log('✅ Header injected successfully');setTimeout(() => {initStreamlinedNavigation();console.log('✅ Streamlined Navigation initialized')}, 100)} else {console.error('❌ Header placeholder not found')} });window.StreamlinedNavigation = {generateStreamlinedHeader, generateStreamlinedStyles, initStreamlinedNavigation, getCurrentPage };
function genSku() {const s = (document.getElementById('shape')?.value || "").toUpperCase().replace(/\s+/g,'');const l = (document.getElementById('length')?.value || "").toUpperCase();const f = (document.getElementById('finish')?.value || "").toUpperCase().replace(/\s+/g,'-');const d = (document.getElementById('design')?.value || "").toUpperCase().replace(/\s+/g,'-');const k = (document.getElementById('sizekit')?.value || "").toUpperCase();const sku = `NAIL-${s}-${l}-${f}-${d}-${k}`;const skuOut = document.getElementById('skuOut');if (skuOut) {skuOut.textContent = sku;skuOut.classList.add('fade-in')} } function updatePricing() {const cogs = document.getElementById('cogsRange')?.value || 8;const msrp = document.getElementById('msrpRange')?.value || 39;const cogsValue = document.getElementById('cogsValue');const msrpValue = document.getElementById('msrpValue');const marginValue = document.getElementById('marginValue');const marginBar = document.getElementById('marginBar');const roasValue = document.getElementById('roasValue');const roasBar = document.getElementById('roasBar');if (cogsValue) cogsValue.textContent = '$' + cogs;if (msrpValue) msrpValue.textContent = '$' + msrp;const margin = ((msrp - cogs) / msrp * 100).toFixed(0);if (marginValue) marginValue.textContent = margin + '%';if (marginBar) {marginBar.style.width = margin + '%';marginBar.classList.add('progress-animation')} const fees = 6;const roas = (msrp / (msrp - cogs - fees)).toFixed(2);if (roasValue) roasValue.textContent = roas + 'x';if (roasBar) {roasBar.style.width = Math.min((roas / 5) * 100, 100) + '%';roasBar.classList.add('progress-animation')} } function calcROAS() {const c = parseFloat(document.getElementById('cogs')?.value || 0);const m = parseFloat(document.getElementById('msrp')?.value || 0);const f = parseFloat(document.getElementById('fees')?.value || 0);const denom = (m - c - f);const roasOut = document.getElementById('roasOut');if (!roasOut) return;if (denom <= 0 || m <= 0) {roasOut.textContent = "Check inputs — margin is non‑positive.";roasOut.style.color = '#f44336'} else {const be = (m / denom);roasOut.textContent = "Breakeven ROAS: " + be.toFixed(2) + "x";roasOut.style.color = '#4caf50'} } function autoSave() {const inputs = document.querySelectorAll('input, select, textarea');inputs.forEach(input => {if (input.id) {localStorage.setItem(`moth_${input.id}`, input.value)} })} function loadSavedData() {const inputs = document.querySelectorAll('input, select, textarea');inputs.forEach(input => {if (input.id) {const saved = localStorage.getItem(`moth_${input.id}`);if (saved !== null) {input.value = saved} } })} document.addEventListener('DOMContentLoaded', function() {loadSavedData();const inputs = document.querySelectorAll('input, select, textarea');inputs.forEach(input => {input.addEventListener('input', autoSave);input.addEventListener('change', autoSave)});if (document.getElementById('cogsRange')) {updatePricing()} });
class DataManager {constructor() {this.storageKey = 'mothEmporiumBusinessData';this.data = this.loadData();this.init()} init() {this.bindEvents();this.autoSave()} loadData() {try {const stored = localStorage.getItem(this.storageKey);return stored ? JSON.parse(stored) : this.getDefaultData()} catch (error) {console.warn('Failed to load data from localStorage:', error);return this.getDefaultData()} } getDefaultData() {return {businessInfo: {brandName: 'Moth Emporium', tagline: 'Nail art as your canvas - Where Beauty Takes Flight', launchDate: '', targetOrders: 100, budget: 5000 }, products: {designs: [], pricing: {baseCOGS: 8, targetMargin: 65, msrp: 39 } }, content: {heroDesigns: 10, categories: {evergreen: false, trendy: false, premium: false }, requirements: {lifestylePhotos: false, applicationVideo: false, macroShots: false, qrIntegration: false } }, progress: {designComplete: 0, contentReady: 0, launchReady: 0, completedTasks: [] }, analytics: {roas: 2.5, aov: 0, cac: 0, conversionRate: 0 }, lastUpdated: new Date().toISOString() }} saveData() {try {this.data.lastUpdated = new Date().toISOString();localStorage.setItem(this.storageKey, JSON.stringify(this.data));this.showSaveIndicator()} catch (error) {console.error('Failed to save data:', error);this.showErrorIndicator()} } autoSave() {setInterval(() => {this.saveData()}, 30000)} bindEvents() {document.addEventListener('input', (e) => {if (e.target.matches('input, select, textarea')) {this.updateField(e.target)} });document.addEventListener('change', (e) => {if (e.target.matches('input[type="checkbox"]')) {this.updateField(e.target)} });window.addEventListener('beforeunload', () => {this.saveData()})} updateField(element) {const fieldName = element.id || element.name;if (!fieldName) return;let value = element.value;if (element.type === 'checkbox') {value = element.checked} else if (element.type === 'number') {value = parseFloat(value) || 0} this.setNestedValue(fieldName, value);this.saveData()} setNestedValue(path, value) {const keys = path.split('.');let current = this.data;for (let i = 0;i < keys.length - 1;i++) {if (!current[keys[i]]) {current[keys[i]] = {}} current = current[keys[i]]} current[keys[keys.length - 1]] = value} getNestedValue(path) {const keys = path.split('.');let current = this.data;for (const key of keys) {if (current && typeof current === 'object' && key in current) {current = current[key]} else {return undefined} } return current} updateProgress() {const checkboxes = document.querySelectorAll('input[type="checkbox"]');const checked = document.querySelectorAll('input[type="checkbox"]:checked');const progress = checkboxes.length > 0 ? (checked.length / checkboxes.length * 100) : 0;this.data.progress.designComplete = Math.round(progress);this.data.progress.contentReady = Math.round(progress * 0.8);this.data.progress.launchReady = Math.round(progress * 0.6);this.updateProgressDisplay()} updateProgressDisplay() {const designProgress = document.getElementById('designProgress');const contentProgress = document.getElementById('contentProgress');const launchProgress = document.getElementById('launchProgress');if (designProgress) {designProgress.textContent = this.data.progress.designComplete + '%';this.animateProgressBar(designProgress)} if (contentProgress) {contentProgress.textContent = this.data.progress.contentReady + '%';this.animateProgressBar(contentProgress)} if (launchProgress) {launchProgress.textContent = this.data.progress.launchReady + '%';this.animateProgressBar(launchProgress)} } animateProgressBar(element) {element.classList.add('pulse-effect');setTimeout(() => {element.classList.remove('pulse-effect')}, 1000)} exportData(format = 'json') {const data = {...this.data, exportDate: new Date().toISOString(), version: '1.0' };if (format === 'json') {this.downloadFile(JSON.stringify(data, null, 2), 'moth-emporium-business-plan.json', 'application/json')} else if (format === 'csv') {this.exportToCSV()} } exportToCSV() {const csvData = this.generateCSVData();this.downloadFile(csvData, 'moth-emporium-data.csv', 'text/csv')} generateCSVData() {const headers = ['Category', 'Field', 'Value', 'Last Updated'];const rows = [headers];this.flattenData(this.data, rows, '');return rows.map(row => row.map(cell => `"${cell}"`).join(',')).join('\n')} flattenData(obj, rows, prefix) {for (const [key, value] of Object.entries(obj)) {if (typeof value === 'object' && value !== null && !Array.isArray(value)) {this.flattenData(value, rows, prefix + key + '.')} else {rows.push([prefix.slice(0, -1), key, value, this.data.lastUpdated])} } } downloadFile(content, filename, mimeType) {const blob = new Blob([content], {type: mimeType });const url = URL.createObjectURL(blob);const link = document.createElement('a');link.href = url;link.download = filename;document.body.appendChild(link);link.click();document.body.removeChild(link);URL.revokeObjectURL(url)} importData(file) {const reader = new FileReader();reader.onload = (e) => {try {const importedData = JSON.parse(e.target.result);this.data = {...this.getDefaultData(), ...importedData };this.saveData();this.loadDataIntoUI();this.showSuccessIndicator('Data imported successfully!')} catch (error) {this.showErrorIndicator('Failed to import data. Please check the file format.')} };reader.readAsText(file)} loadDataIntoUI() {Object.keys(this.data).forEach(section => {this.loadSectionData(section, this.data[section])})} loadSectionData(section, data) {if (typeof data === 'object' && data !== null) {Object.keys(data).forEach(key => {const element = document.getElementById(key);if (element) {if (element.type === 'checkbox') {element.checked = data[key]} else {element.value = data[key]} } })} } showSaveIndicator() {this.showIndicator('Data saved', 'success')} showErrorIndicator(message = 'Error occurred') {this.showIndicator(message, 'error')} showSuccessIndicator(message) {this.showIndicator(message, 'success')} showIndicator(message, type) {const indicator = document.createElement('div');indicator.className = `save-indicator ${type}`;indicator.textContent = message;indicator.style.cssText = ` position: fixed;top: 20px;right: 20px;padding: 10px 20px;background: ${type === 'success' ? '#4caf50' : '#f44336'};color: white;border-radius: 4px;z-index: 10000;animation: dataSlideIn 0.3s ease-out;`;document.body.appendChild(indicator);setTimeout(() => {indicator.style.animation = 'slideOut 0.3s ease-in';setTimeout(() => {if (indicator.parentNode) {indicator.parentNode.removeChild(indicator)} }, 300)}, 2000)} resetData() {if (confirm('Are you sure you want to reset all data? This cannot be undone.')) {localStorage.removeItem(this.storageKey);this.data = this.getDefaultData();this.loadDataIntoUI();this.showSuccessIndicator('Data reset successfully')} } getBusinessSummary() {return {brandName: this.data.businessInfo.brandName, progress: this.data.progress, targetOrders: this.data.businessInfo.targetOrders, budget: this.data.businessInfo.budget, lastUpdated: this.data.lastUpdated }} } document.addEventListener('DOMContentLoaded', () => {window.dataManager = new DataManager();addExportImportButtons()});function addExportImportButtons() {const analyticsSection = document.getElementById('analytics');if (analyticsSection) {const exportDiv = document.createElement('div');exportDiv.className = 'card mystical-card floating-card';exportDiv.innerHTML = ` <h3>💾 Data Management</h3> <div class="form-group mystical-form-group"> <button class="btn mystical-btn" onclick="window.dataManager.exportData('json')">Export JSON</button> <button class="btn mystical-btn" onclick="window.dataManager.exportData('csv')">Export CSV</button> <input type="file" id="importFile" accept=".json" style="display: none;" onchange="handleFileImport(this)"> <button class="btn mystical-btn" onclick="document.getElementById('importFile').click()">Import JSON</button> <button class="btn mystical-btn" onclick="window.dataManager.resetData()" style="background: #f44336;">Reset Data</button> </div> `;analyticsSection.appendChild(exportDiv)} } function handleFileImport(input) {const file = input.files[0];if (file) {window.dataManager.importData(file)} } const style = document.createElement('style');style.textContent = ` @keyframes dataSlideIn {from {transform: translateX(100%);opacity: 0} to {transform: translateX(0);opacity: 1} } @keyframes dataSlideOut {from {transform: translateX(0);opacity: 1} to {transform: translateX(100%);opacity: 0} } `;document.head.appendChild(style);
